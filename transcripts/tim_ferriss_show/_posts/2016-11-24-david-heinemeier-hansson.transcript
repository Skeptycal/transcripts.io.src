---
title: "#203: David Heinemeier Hansson on Digital Security, Company Culture, and the Value of Schooling"
keywords: 'David,Heinemeier-Hansson'
transcriber: "<a href='transcripts.io'>Transcripts.io</a>"
web_page: "http://fourhourworkweek.com/2016/11/25/david-heinemeier-hansson-on-digital-security-company-culture-and-the-value-of-schooling/"
audio_url: "https://overcast.fm/+BmGWHTPWc/%{chrono}"
speakers:
  - first_name: 'Tim'
    last_name: 'Ferriss'
    role: 'host'
  - first_name: 'David'
    last_name: 'Heinemeier-Hansson'
    role: 'guest'
---

!# Tim @ 00:04:54

Hello, lady and germs, boys and girls, this is Tim Ferriss and welcome back, in my creaky chair, to another episode of the Tim Ferriss Show as per usual we'll be discussing the tactics, tools, habits of a brilliant individual, a world-class performer as I usually say and this is no exception. You might remember our guests, David Heinemeier Hansson, often referred to as DHH, from an earlier episode. He's back for Round 2 because his episode is about to cross a million downloads and that's in barely two weeks so we had to bring him back. You had a million questions that we didn't get to last time. If you missed the first round DHH, [@dhh](https://twitter.com/dhh) on [Twitter](https://twitter.com/) is the creator of [Ruby on Rails](http://rubyonrails.org) is co-founder and CTO at [BaseCamp](https://basecamp.com/) formerly known as [37signals](https://37signals.com/) and is the best-selling co-author of [Rework](https://www.amazon.com/Rework-Jason-Fried/dp/0307463745) and [Remote: Office Not Required](https://www.amazon.com/Remote-Office-Required-Jason-Fried/dp/0804137501).

Because three hours wasn't enough the first time; it was really fast. DHH spent another hour answering your most popular questions, most upvoted questions. In this episode he discusses digital security, the value of schooling, three questions you should be able to answer, company culture, how the hell you piss if you are in a 24-hour car race and much much more. So, as always, please enjoy this episode with David Heinemeier Hansson.

!# Shelton @ 00:06:21

What skills does he think are most important today? Are college or graduate degrees worth it?

!# David @ 00:06:28

So, I have a conflicted relationship with official schooling, whether that's even high school, but certainly also college. I used to have perhaps a more unrefined opinion of it, which was, for example, as it pertains to Business School, that it was so totally not worth it. I come to appreciate some of the aspects of some of the things that I was exposed to there more though over the years. But it's all in the context of how you acquire that knowledge. So for me in [Denmark](https://en.wikipedia.org/wiki/Denmark). College is not only free. You're getting paid to go. You get... let's see if I can do the math in my head.. you get like 400 bucks a month... no, actually more than that...
 600 months or something like that to go to a school... maybe even a little bit more that that. Anyway, enough that you can cover almost all of your basic living expenses. Most people supplement with some work on the side and I certainly did, but it's not an overwhelming requirement and then there's also government assisted loans that have sort of a low cap that won't trap you in sort of a debt trap. So I'm evaluating my college experience against that. That I came out on the other side, having been paid for the time I spent there and I did not end up with a mountain of debt. If you do the same thing in the US and you come out on the other side with the $100,000 or $200,000 or any other amount in the real student debt these answers might not apply as directly and self-study might be a better answer. But what I did like, to get back to the point, about my college exposure was all the things that I perhaps wouldn't just have gotten into on my own. I got a good basic understanding of organizational theory, organizational models, Maslow's Theory and all these sorts of the basic canon of business administration and the world that it is.

And what we ended up with on how to run [Basecamp](https://basecamp.com) was in many ways the opposite, right, like we didn't follow the prescriptions, many of the prescriptions, but knowing about them was actually helpful in establishing where we would choose to be different and where we wouldn't have to invent the deep dish again and we could just follow tradition and where we told me when was tradition is stupid. I gave a talk at the [Stanford Business School](http://gsb.stanford.edu) quite a few years ago now called on [Unlearn your MBA](https://www.youtube.com/watch?v=MlhAkNWC1qo) because what I thought was part of an MBA, lots of overlapping, theory on both economics and organizational theory. A lot of the things that I learned I'm glad that when I learned them I wasn't an impressionable 18-year-old. I think it's one of the other differences about going to college in the US vs. in Denmark. I didn't go to college right away. I stayed out of school for three or four years after high school and worked in the internet industry, which was just enough time to get me totally jaded about organizational theory and innovation and disruption and all these other keywords and buzzwords that wouldn't be thrown around in business school with a serious face. I was jaded enough to have a very critical mind so I wouldn't be programmed. I was trying to filter everything that I've learned through the lens of real life and real experiences and that made it much more effective I think in terms of figuring out what should stick and what shouldn't stick, and what should I not just have a skeptical opinion about but being direct opposition to. I find it a great way to define who you are and what you believe is, not just the positive things, I am for this, but also I'm against this I want to do the opposite of that. I think I actually learned more from business school by saying, "Oh, yeah, all these things, I'm not going to do that. We're not going to work like that. I think that's stupid or mean or
bad in any form and we can do something else. So, I think that that really was worth it, and so was the exposure to philosophy and... I would say where I got the least out of it actually was on the computer science part. As I said, it was a joint degree in computer science and business administration and computer science was...
I just found more value in self-study. I think the opportunities that we had even at that time-- early 2000-- open source software and tinkering on your own was a much better way for me to learn. In large part because I learned my technical things or skills through using them in anger. It wasn't like I sat down for a lecture and then like, "Oh, yeah, okay. I wonder how I can use this one day." No, no, it was I am trying to build this specific thing, what do I need to learn to do that? So that worked really well for the specific technical attributes of it, but that doesn't work that well for Philosophy like it's harder to figure out what you don't know about what you don't know, right.

And getting exposed to the disciplines of liberal arts and life in that sense was really helpful. The same actually goes for economics and organizational theory. That there are some practical theories and models and ways of thinking that you may not want to use them but your mind is better by knowing them. I guess I shouldn't slander programming/computer scientist totally in that, but there's also plenty of value in computer science about knowing different models and paradigms of thought. If you know [functional programming](https://en.wikipedia.org/wiki/Functional_programming) vs. [procedural programming](https://en.wikipedia.org/wiki/Procedural_programming) or [object-oriented programming](https://en.wikipedia.org/wiki/Object-oriented_programming), understanding the sort of broad, [tetonic plates](https://en.wikipedia.org/wiki/Plate_tectonics) in your domain is is definitely very helpful .

So I've warmed up to schooling over time and perhaps part of that is because
 I realized that more of it stuck than I thought. That I would sit through some lecture and I would think during the lecture that this is stupid, I'm not going to use this. And years later it would come up that, "oh, that is similar to that one thing," and I would at least have knowledge of which thread to pull on further. I wouldn't necessarily remember the whole lecture, but I would know where to go to learn more and inform myself more about this things.

I think the main value there is just opening your mind to a broader window on the world and a broader window on life, to be honest, especially as it comes to these softer skills. [STEM](https://en.wikipedia.org/wiki/Stem) is a big rah, rah moment for a lot of people in technology and lots of people make fun of history or philosophy or languages and so on. I go like, you're wrong. My number one take away from going to college and spending time there and so on was to come out on the other side not as a more efficient worker, but as a better human, as a more well-rounded human being for a long life. And the notion of the long life is quite accurate. There are several times during the three-year degree where I went like, "Ah, shit, I'm wasting my time." But, you know what, really over three years compared to what the next 80. There are probably limits to just how much I'm wasting my time. And when there were limits when I really thought something was a complete and utter waste of time, I just wouldn't pay attention and just accept my bad grades and I spent that time on something else and that was wonderful too.

!# R.J. @ 00:14:50

Does DHH believe that self-writing code will be a reality soon-- AI writing its own code like Skynet? If so, when would that be?

!# David @ 00:14:59

It's a really interesting question that traces back a long time. When I was going through Business School; I have a joint degree in computer science in business school. One of the things that we looked at the time was something called case tools, where basically you would basically outline your requirements for a piece of software and then the software try to figure out how to write that piece of code for you. And that has a long tradition going back nineties in the eighties where people thought that we're just on the cusp of figuring out when humans don't need to know the code anymore. And we will then arrive at a place where they can just describe the requirements and voila the software will be produced for them. I can totally see the appeal of that obviously.

And we have moved there to some extent. Computer programming started as a [assembler](https://en.wikipedia.org/wiki/Assembly_language#Assembler) and [punch cards](https://en.wikipedia.org/wiki/Punched_card) and a very low-level way of describing your program until we built abstraction up on distraction upon extraction on top of it and now today they were sitting with software and environments like [Ruby](https://www.ruby-lang.org/en/), where you are describing what you want to happen at a very high level, right. But obviously, that's still a fair jump to adjust a natural English description of the software. So that's what really breaks down for me. Or that's why I don't see computer-written software as something that's just around the corner because writing software is really about making decisions and you can really only have something generated for you if you're willing to cede a certain set of decisions. And we've already gotten pretty good I'd say at building those abstraction levels up to a point where the decisions we are left to deal with, and certainly this is my aspiration with Ruby on Rails, but the decisions we care about. If you find a set of decisions that you just don't care about... you just don't care about how that level of the code is implemented... well, then you can abstract and build on top of it, but you can't just say to a computer, "Hey, can you make me a [Base Camp](https://basecamp.com/), It needs to have messages and some chat and blah, blah, blah, blah," right, because you're not going to get the [Base Camp](https://basecamp.com/), that we have.

The [Base Camp](https://basecamp.com/) that we have is the product of tens of thousands of little decisions that all of these in our eyes matter because if they didn't matter then someone else would have had to figure that out, which I guess is a little bit like if you're not writing your own software, or if you're asking someone else to write yourself for you, you kind of try to do this, right, you pretend that you can tell another group of people through a set of requirements, "Can you build me this thing." And then they'll build you something that's close enough to what you want. That's most programmers and designers how well that typically goes. It's a very painful process for a lot of consultants and people who live off trying to implement other people's requirements because it's a really fussy process. It's really fussy to narrow down what it is that you really want and it turns out, certainly for us as software builders, the things that we really want is those ten thousand decisions all made right. It's not just one or two or three things.

So even if we could get to the point where AI could write software on its own. How would we specify the requirements? That's where it really stops for me. Again, that doesn't mean that this won't happen and maybe AI will become so smart as to be basically that black box and perhaps we won't get exactly the software that we want, but it will be close enough and it'll be so much more efficient. I don't see that as around the corner and I'm around the corner I mean 10, 20 years. Funny enough, of course, that has been the horizon for AI in general, it seems for about the existence of computer science and perhaps even before that. We thought, "Oh, yeah, just like 10-20 years away from having this AI." And if you look at what AI is today, I think that's a very flattering term for a lot of systems that really aren't that smart. Try to talk to your [Amazon Echo](http://www.amazon.com/oc/echo/) or [Google Home](http://home.google.com/) and pretty quickly the [Turing Test](https://en.wikipedia.org/wiki/Turing_test) breaks down or rather it just fails it, right.

So, who knows what's going to happen in 30 years. I don't think anyone can predict that, but I don't see it on the close horizon. I don't see wanting it as long as I care about all the thousands of those little decisions that go into it because I think we've arrived at a point where there are plenty of decisions I don't care about. I don't care about decisions about memory management largely speaking until it's a major issue and it very rarely is that the kind of work that I do. So I can abstract myself from releasing memory by hand, as you used to do in some programming languages that are closer to the metal, so to speak.

!# Martin Shorter @ 00:20:14

What are his thoughts on building a company culture?

!# David @ 00:20:18

Culture is one of those words that gotten almost too tainted to be useful. Because culture is now sort of a slogan for all sorts of bullshit. Culture is a ping pong table. Culture is a mission statement. Culture is all these external artifacts, which maybe those are the results of culture, I don't think their culture itself. I think a far more interesting definition of culture is the things that we do over and over again. And it's hard to just write that up
 before and say these are the things we're going to be. Because what happens often is, of course, you don't live up to that stuff. I find the definition of culture far more interesting as a historical expedition almost, like these are the things that we do.

So you start doing a bunch of things as a company and your definition of culture should be a retrospective of what are those things. what are we doing as a company and as the culture that we have... and do we would like that? So, culture becomes an iterative process where you keep looking back at what you did and then you make changes when you see things you don't like. And we certainly had a lot of that at the [Base Camp](https://basecamp.com/) over the years, where we would look back at certain policies or certain ways we were doing things and say, "Yeah, that currently part of our culture, but not flattering parts of the culture so let's change them." Then we would have other parts of the culture and say that is really working; we should do more of that. Not only should we be doing more of that, we should spread that that as a gospel to other companies so they too can benefit from this aspect of our culture and that's what the books that we wrote [Remote](https://37signals.com/remote) and [Rework](https://37signals.com/rework) are about. There taking the aspects of culture that [Base Camp](https://basecamp.com/) had and have and saying, "We can share those with other people in sort of snippets."

And we can say, "OK, we're going to have a culture of no overwork. We're not going to have a culture of workaholics." In fact, in [Rework](https://37signals.com/rework) we say fire the workaholics. So we want to have a place of work where 40 hours less is what's expected of people. So that becomes part of our culture, or is part of our culture, and then we sort of observe that and then extract it. I think there are times where we say okay we have some aspirations, but they're based off again History of us looking at things were doing and saying that's not working, we want to do something else. But it doesn't really become part of the culture before we actually do that. I think a lot of people think that you can just describe this utopia that you want. Op, that is your culture like... like, "We ascribe to be the best in quality. We are all about quality." Well, that's a meaningless statement... It is worse than meaningless statement if it's not true.

There's nothing worse for the integrity of a culture than a description of Culture that does not match. It is incredibly corrosive to have company leaders or company descriptions that do not mirror reality. We just stumbled into this again at [Base Camp](https://basecamp.com/) when we had 50 people and we realize that in addition to all the books were written and so on they're still all the matters of culture and practical perceptions of things at base camp that are hard for a new person who comes in, a new hire, to learn in a quick order. We have a very much an oral culture at [Base Camp](https://basecamp.com/) and a historical culture, where we did things at certain points and like that formed part of our ethos, but that takes a long time to adopt as someone new.

So we thought to make things a little more explicit and we wrote up an employee handbook. That employee handbook included all sorts of different aspects of prescriptive culture, but the most important, I think, was a warning saying if you're finding things in your actual work that does not match the description of things you have to stand up and say so. That we will not become a company-- and that's probably more prescription again description-- although, I don't know, I'm flattering myself and that's always easy to do, but I'd like to think that we do sort of try to live that. That even when we have aspirations and we don't live up to those aspirations, we're honest about it and we can talk about how we failed such that we can get closer and try again. And we already got feedback on that. We wrote things up in that employee handbook where someone new joined the company and said like you know what that's not my experience, that's not what I saw.

I find that is just one of those unique beautiful gifts that new employees and new eyes can give you. That they see things much closer to how they really are than the people who've been steeped in the culture for a long time and have sort of just accepted all the illusions and delusions that build up over time. When you get someone with fresh eyes in, they can just go like, "Hello, guys, this isn't right. This isn't working or this isn't clear. Or, on the flip side, this is really working like wow you guys are really different when it comes to this one aspect. I hadn't lived through that before." I think we have a fair amount of that at [Base Camp](https://basecamp.com/), too, where we need essentially complete reprogramming, especially for people who've worked in more corporate environments. [Base Camp](https://basecamp.com/) is quite different from those environments and it can be hard when you transplant from one culture to another.

A lot of it is not just learning the new cultures; it's about unlearning the old culture. And you have to respect that and you have to give that some time and you have to be explicit about how those transitions happen and to say that they matter. And I think that that is
sometimes the dichotomy the companies and people find themselves stuck between is that either they're paying lip-service to culture and culture is a ping pong table and culture is a mission statement or slogan, or they go over in the other ditch and say that culture doesn't matter at all, like it's just about the work, which is funny enough one of the aspects of our culture and a different area of the company. Culture is real and it matters and you can't just program it upfront. Like it has to be run. It has to be actually lived to be real.

!# Nate P. @ 00:27:22

What things does he do to ensure his digital security-- password managers, etc?

!# David @ 00:27:27

This is one of the things that I have gotten a lot more interested in over the years. When I started with computers, I was completely ignorant of security and thought that it was overstated and who would want to know my secret, who would want to read my email. And I think even before just starting to hear about people getting hacked, getting this sense that this is real, and then of course [Snowden](https://en.wikipedia.org/wiki/Snowden) and his revelations about how governments around the world, in particular in the US, are invading everyone's security, really brought things to the forefront. I think we've gotten, and I have gotten, a lot more serious about ensuring things don't go over email or other insecure ways.

So, for the specifics, I use [1password](https://1password.com/). I use [1password](https://1password.com/) both personally and with my wife and at the company. And that's not a perfect story. I think password managers, especially the ones that you share things through syncing, still have ways to go, but it's way better than trying to either, a) remember a thousand different passwords, which no one does anyway, or just use the small handful of passwords that you keep reusing over and over again. So that was a pretty... well, not that recent... a few years ago switching to a password manager. I had some passwords for an embarrassingly long amount of time and just seeing site after site getting hacked really brought that to the forefront.

On top of that of course, encrypt everything. This notion that when you turn off your computer or even then goes to sleep in the same with your phone that it could be lost is such a revelation. I remember when in college someone would lose her laptop and then go like, "Oh shit, I lost all my stuff like that person is going to have access to all my stuff." It was just a terrible, terrible thing. I think we really move forward as a society by now you can lose your computer or your phone and it doesn't mean losing all your data to some criminal... and not worry about who's going through your photos or whose going through emails or whatever else. So encryption on all the things. I find it really disappointing, to be honest, that when you buy a new Mac, full disk encryption is still not turned on. It's something that everyone should turn on immediately if they haven't and that doesn't just go for laptops but it also goes for your desktop computers. People have their houses broken into all the time so go to [System Preferences > Security & Privacy and then File Vault](https://support.apple.com/en-us/HT204837) and look to see whether that's turned on and if it's not turned on turn it on immediately.

[Two-factor authentication](https://en.wikipedia.org/wiki/Two_factor_authentication) is another huge one, especially on your email account. If you have an email account right now that is only secured by a password, especially if that's not a strong password, it is just the one you remember, you're just waiting to get screwed because if someone gets into your email account then they have access to everything, generally speaking they can reset your password on any other site and they can get into anything and you will be owned and it will be very very painful. So I use Gmail and use their [two-factor authentication](https://en.wikipedia.org/wiki/Two_factor_authentication), which basically just means when I'm trying to log into [Gmail](https://gmail.com/) on a new computer, occasionally I need a second device-- I need my phone-- to get a code and then I can login from there. So that's been a huge step up. I've turned that on everywhere you can turn it on, certainly turn it on for things like your bank and your email and I have it on for Twitter, and turn it on for your Apple ID and you turn it on basically anywhere you can. And now it's at the point where if the site doesn't have [2FA](https://en.wikipedia.org/wiki/Two-factor_authentication), I like, "Shit, I hope I don't have to put anything important in here." I'm really glad that we got [2FA](https://en.wikipedia.org/wiki/Two-factor_authentication) into [Base Camp](https://basecamp.com/) quite a few years ago because I wouldn't feel good about using a service where I had to store important information without [2FA](https://en.wikipedia.org/wiki/Two-factor_authentication) there. And it's still shocking to me that to this day and age, I'll still sign up for new service and maybe it won't even have [2FA](https://en.wikipedia.org/wiki/Two-factor_authentication), but they'll also put retarded restrictions on your password like over it has to be only 12 characters. I am like, "What, I am using [1Password](https://1password.com/). I am using a password manager. Let me have my 25-character mixed password and put that in there."

So, yeah, [encryption](https://en.wikipedia.org/wiki/Encryption), [2FA](https://en.wikipedia.org/wiki/Two-factor_authentication), and a [password manager](https://en.wikipedia.org/wiki/Password_manager) I think that is sort of the basic trifecta. That if you don't have those things in place right now get them, not just for the sake of if you should get hacked, but also just for the sake of ensuring that governments around the world have access to less of your stuff, same goes obviously for instant messaging. Use [iMessage](https://www.apple.com/iphone/built-in-apps/messages.html) use [WhatsApp](https://whatsapp.com/) or even better your [Signal](https://whispersystems.org/). Don't use things that send things as clear text or only encrypted in transit like Google's offerings. They have to have a special setting turned on for you have the things encrypted. I think that's terrible. Don't use that if you can avoid it. Yeah, I would say that those are the top things.

!# Levy B @ 00:33:09

How did he and [Jason Fried](https://twitter.com/jasonfried) make the tough decisions to sell off the portfolio products [37Signals](https://37signals.com/) created-- [Highrise](https://highrisehq.com/), [Backpack](https://basecamp.com/retired/backpack), [Campfire](https://campfirenow.com/) and so on when you rebranded as [Base Camp](https://basecamp.com/) and double down on that product? I'm especially interested in the process that they used to think about the decision and the forces at play that they were facing.

!# David @ 00:33:32

Yes, this was an interesting time for [Base Camp](https://basecamp.com/). I think we were around just under 30 people and we're starting to feel stretched thin. We had four plus products-- four major products-- and a lot of others like shifts going on at the time. And we had fallen into this habit of basically just thinking, "Ah, we're okay with [Highrise](https://highrisehq.com/) right now, for example. Let's just put that on the shelf for six months or perhaps even longer and then we'll just focus on [Backpack](https://basecamp.com/retired/backpack) or we'll focus on [Basecamp](https://basecamp.com/)" And this rotation just meant that our products would kind of just languish for some time. And you don't feel it right away. Customers, generally speaking, wouldn't really complain like, "Oh, there hasn't been any new features for six months." But it would still seep in and worst of all we felt bad about it. We didn't feel we were doing our products justice, that there was more that we could do and feel better about if our first instinct, we were more people. So that led to the discussion of, "Hey, we're 30 or 40 people right now. We have to be a lot more." Like if we have four major products and we don't want to do them justice and we want to make native apps for all of them. We want to do a really good design that we think through. We want to do everything to the peak of our abilities, the best products that we can make, right, the best software that we know how. That's not possible with the company we have today.

So we face the natural-- I don't even call it dilemma-- because
 for most people it is not a dilemma, for most companies, it is not a dilemma. What you see is, "Hey, you have profitable products. They need more people. Just hire more people." That's the natural conclusion, right. Well, not for us. We've always wanted to stay a small company and for me, in particular, I didn't want to run a big company. I didn't want to run the company of hundreds of people and I saw just the jump that if we went from let's say 30 or 40 people to 80 or 100 people we'd already be down that path of no return, that we could not then prevent the whole thing from ballooning ever further from there and then would be 100 people then we'd be two hundred people and I would
up in the morning thinking, "Why am I doing this? Do I really want to keep doing this?" And I am quite sure my answer would have been no. So, that led me to the obvious conclusion that the natural path of expansion, the natural path of just hiring more people to deal with more work, would lead to a place where I wouldn't want to be interested in this work anymore. I would want to get out. As so many people who work with startups and new companies do. They realize that they enjoyed working with companies of a certain size-- let's say 50 people or less, or 30 people or less-- and then they just go with the flow and then they end up with a large company and they think, "Oh, OK, it's time to start over." Well, I don't want that.

So, we had some pretty heated discussions for a while. We have some pretty heated discussions where Jason in particular accurately said, "Like, hey, we have these principles of wanting to make the best products and work of our life and we cannot do that if we're stretched so thin so we need more people otherwise we can't do it." And me going like, "yeah, but no." I don't want to run a big company... push push push push push push. Well, Jason then called a small group of us together in Chicago to think about a big alternative and that big all alternative, of course, was becoming [Base Camp](https://basecamp.com/). That we would take all these additional products that we have-- all these extracurricular activities-- that were spreading us so thin and we would simply get rid of them.

Not get rid of them in just flush them down the toilet, but get rid of them as in spinning them off as we did with [Know your Company](https://knowyour company.com/) and [Highrise](https://highrisehq.com/) to great effect or roll it into the main product as we did with [Campfire](https://campfirenow.com/) or even just shut it down in the sense of not accepting new customers as we did with [Backpack](https://basecamp.com/retired/backpack). And we just sat at that meeting and thought like, "Yes, this is the right thing to do." It's not the economically right thing to do. We could certainly have been better off and had a bigger business if we would just have said, "Know what, we're just going to hire a bunch more people and we're going to direct those people to keep improving all products at the same time with no stalls and stops." But why? We're already a big enough company. We're already making enough money. Jason and I are interested in [Base Camp](https://basecamp.com/) because we want to be here for the rest of our working life. Like that's been the goal from the get-go that we wanted to design a company that we would be comfortable working at- not just comfortable, but happy-- working at for the rest of our lives.

So that's how you get to these weird conclusions, where you go like, "Hey, we have this awesomely profitable business." Let's take [Highrise](https://highrisehq.com/), for example. [Highrise](https://highrisehq.com/) was that the level where [Highrise](https://highrisehq.com/) alone we could have run the whole company off that and we went like what we're going to spin it off. We are not going to work on it anymore. [Backpack](https://basecamp.com/retired/backpack) had made millions of dollars. We basically said, "You know what, that was a great run. It's now behind the times. We're going to park it. We're going to make it part of our legacy and as part of that legacy we came up this saying that "we're going to keep things around until the end of the internet." That someone, for example, who used [Backpack](https://basecamp.com/retired/backpack) was not going to wake up one morning to a sunset. They're not going to wake up to a fake sunset as it always is of course-- like some sort of like, "Oh, it's been an incredible journey. Now pack your shit and get out of here because Backpack is shutting down." I have seen all sorts of companies from Google with [Google Reader](https://google.com/reader) and many others-- countless others-- almost all others, working in our industry when they decided they didn't want to work on something anymore they just pulled the plug and users be damned and workflows be damned and that was just wasn't use. We still to this day have people using [Backpack](https://basecamp.com/retired/backpack). We still to this day of people using [Ta-Da List](https://basecamp.com/retired/tadalist), which was a simple to-do list manager. We launched in 2005 and shut down a couple years later and still people using it. And I'm really proud of that. I'm proud of the fact that years and years late we can maintain our legacy while still having one major focus: [Base Camp](https://basecamp.com/)-- that one product.

So those are some of the dynamics that were going on at the time and I think looking back at it now I just go like of course. Of course, you should have done that. Of course, this was the right answer. Of course, we actually went too long. But that's how things change in business, where we started out with the idea.... We didn't know that [Base Camp](https://basecamp.com/) was just going to take off like this. We didn't know that [Base Camp](https://basecamp.com/) was just going to keep on growing and growing and growing as it has. So when we started out we were hedging our bets. We launched other products, in part thinking, "Well, [Base Camp](https://basecamp.com/) might just be a fluke. I might just go out of business and we better have some other ideas." And that's a good strategy I think in the beginning as we were hedging our bets. But then one of the bets just turned up to pay off so spectacularly that it was almost negligent to keep that strategy, to keep that original hedging bets strategy we needed to double down and the thing that was clearly working so much better than everything else least we let that slip through our fingers.
so there was

!# Levy B @ 00:41:39

He and Jason are both very opinionated. How have they managed their relationship as co-founders, especially being remote? Can he share a story about the biggest fights they've had as co-founders and how they resolved it? General rules and processes to use when managing disagreement and conflict in their relationship.

!# David @ 00:41:57

Sometimes things get heated. I think things get heated usually actually when we talk about specific product things-- specific ways of attacking features or how to prioritize things-- and we see things differently. But that heat dissipated incredibly quickly between Jason and I I would say because we always come back to the fundamentals-- the fundamentally shared principles we have for the kind of company we want to build and for the kind of product that we want to build. So when you sort of strip things back to first principles and see like, "Wait a minute. How deep does this disagreement go?" We find that most of our disagreements actually lay at the surface and if you just keep digging and you keep scratching as we talked about on the podcast then you find the common ground. It might just be buried a little further down, but it's there. Because if it is not there then you have deeper problems anyway, right. Then things wouldn't last for this long.

But on top of that we've used all sorts of specific tactics to resolve the surface tensions and one of the tactics that I particularly like and we've used for a long time is _who cares most._ So when we go into a disagreement, sometimes the head can get pretty hot, but usually, there's one person who cares more than the other person. And we just set up a give-and-take system, where whoever cares most if the discussion goes long wins. That means that sometimes I can care a fair amount of something and then just still say, "Alright, I'm going to let it go. Jason, you do it." And then he does it and then the next time perhaps I'm the one who cares the most and then we go with my side of things. The majority of the time we'd argue, argue, argue. It would get heated, heated, heated. Then everything calms down. We perhaps take a day away from it, come back to it and we're all on the same page. So even those areas or times where we have to basically just concede a point they're pretty rare. And when they happen it's fine. It will play over fine. Over 12 years, you'll have some, I'll have some. Everything will be just fine.

Another tactic to use when you have a disagreement is who's going do the work. If I have strong opinions about how a piece of design is supposed to be implemented, well, if it's Jason who actually has to do the work and corral the troops  and designers that he's working with, he just has a natural advantage there. He has naturally higher ground. It doesn't mean he's always right. It doesn't mean we will always go that way, but I'll concede the point more often than not when it falls into his specific wheelhouse, which is design. Same thing goes for programming. We talked about lots of features in [Base Camp](https://basecamp.com/) where it's mostly a technical challenge and as the technical person or the programmer between the two of us, I get to have the higher ground when it comes to technical matters. So I think we have a great mutual respect for that expertise that each of us holds. While then, of course, we have the overlap areas, where it's about generally running the company or marketing or anything else like that. We can't really use higher ground in those scenarios because it's more even ground were being met on, but that also means that either we use that other principle of who cares more about it, or as it happens in most cases neither of us ends up being that passionate that if you talk about it for just a little while longer than it resolves itself.

And finally, I would say that we employ the same tactic that we encourage everyone at the company to employ, which is to stop talking and start making. When we have disagreements about which way to go. Just trying it usually resolves f things very quickly. So if it's about a future in Base [Camp](https://camp.com/) then you have to implement it and see how it feels and see how it works. If it's about a marketing strategy, just find the smallest way you can get a disprovable test going and then try it. Again, if I think something is not going to work and we try it and it doesn't work, okay so what, well we wasted a little bit of time, we wasted a little bit of money, no big deal. If we try something I don't think is going to work and it works, again, I win. So if you look at it from that perspective you can "win." You can get to the great outcome in all cases, whether you're right or whether you're wrong you still win. If you're right then we will carry on with that idea. If you're wrong then, hey, that great idea made it through even with your position.

!# Levi B @ 00:46:48

David is a proud father. I would love to hear about his most important lessons learned. The things he does as a father that worked well for him and his children. How does he know that he's being a good father? How does he measure himself?

!# David @ 00:47:00

Well, we talked about this at some length on the podcast, but I look at this on the broad scale at the top-level in much the same way as everything else, which I'm sure is a limitation that I have one pair of glasses to see most of the world, which is how would I feel if I was in Colt's shoes. For whatever reason, I have a pretty good memory of what it was like being a four-year-old and the things that I found unreasonable. So to me, it's not that much of a stretch to put myself in Colt's shoes and to see where things go from there. So I try to think about things from that angle. Is this reasonable or this is not reasonable? And even when it's not reasonable ,which is a lot of times when you're dealing with three and four-year-olds or smaller kids, can we just let it play out anyway? Like, what's the worst that can happen here? If the worst that can happen is Colt is going to get materially hurt as in broken bones and blood spotting all over the place or  death. Okay, you don't get to make that call, right. If you can just get a little bit hurt like you can bang your head or you can scratch your knee or whatever, fine, experience that on your own self, see how it goes. If you want to stay up past your "bedtime," which is one of these things that adults impose on kids to tell them when it's convenient for the adults to go to sleep. Fine, you can do that. You can choose on your own. And sometimes I will say, "Like, if you just want to keep being on you iPad, you can do that.
You get to sit in the living room by yourself. I'm going to bed because I cherish and value my sleep immensely so if it's up to me to go to bed anyway, well, I'm just going to do that and you can figure out what you want to do." And what usually happens is he'll continue playing for another 10-15 minutes and then he'll want to go to sleep, too. So I think there's a lot of wins to be had when you don't have to win everything and you don't have to win right now and you accept that kids are not only people but that they have to form their own first-hand experiences. You can't tell a kid, in most cases, "Well, if you eat another gummy bear you are going to have a tummy ache." Much better for him to just gorge himself on those gummy bears and get that tummy ache and learn for yourself that like eating a whole bag isn't that great.

Same thing with the sleep thing. If he wakes up and he's tired in the morning, well, there's some feedback. Getting those first-hand feedback loops playing is a far better strategy in my mind than trying to teach them. Teaching those things don't really work that well I find. What you can do is offer commentary suggestions and so forth such that, not that they'll work in the moment, but that when the natural feedback loop plays out perhaps it'll ring a bell. Like, oh, actually he said something about me being tired if I stay up all night or I'll have a tummy ache if I eat this or some ways for Colt to put things into perspective once he gets those consequences and smacking in the face of himself, right.


So, how does that really play into measuring yourself as a good father? Is there a scoreboard you can keep? Probably not. You probably won't know to a large extent. You will  know the first-hand responses, right, like you'll know whether you're having a good time and a good relationship in the moment. Do you know how that's going to play out over the next 20 years? No, you don't. So you have to just go with your best judgment on that and my best judgment is how would I feel in his shoes? And it is reasonable? Can we just let it play out? Can we just let it slide? Which I'm sure for many parents-- not only am I sure I witnessed and heard it from his other parents-- it sounds like overly permissive and lax and all of those things. You know what, I'm okay with that. If for no other reason that... one of the guiding principles that I have with Colt is _How to raise a rebel._

I don't want a compliant kid. A lot of parenting is about having compliant kids, who will do what they are told and sit still when you ask them to and be proper and blah blah blah. You know what, that's not that high on my list of priorities. This came to the forefront in part when we tried a [Montessori School ](https://en.wikipedia.org/wiki/Montessori_school) of all things in Spain. And we thought at first, well, Jamie had read up a bunch on the Montessori and she'd given me a good recount. This sounds great... like, this sounds much better than traditional schooling and play time and so on. So we take three-year-old Colt there and he absolutely hates it, right. He absolutely hates it. He cries and kicks and screams, like don't want to go, don't want to go. It's not the first time, not just a second day, for like a week and a half. And after a week and a half, we are like this is not getting better. What is going on here? Then we had some conversations with the specific school and they are like, "No, no, Colt is going to be OK. Let me tell you a little bit about our school. Our number one word here is respect." And I just went like, ah, shit. Oh, of course that is not going to work. Really your number one word for three-year-olds is "respect," as in that they should respect their teachers and they should respect the rules. Yes, this is not going to work. We are otherwise following the path here on how to raise a rebel and that's just not a good fit for our kid. So we learned from that that even if you think like, "Oh, they have all the right wooden toys with no bad paint and they can play out in the yard and so on. There are some structural frameworks about how teachers and adults think about the relationship to kids that are very much at odds with the different ways of thinking. And so this is one of those cases where we went like this is not the right thing for our family. And then we put Colt in a basically a playschool, where there was no structured learning, where all he did all day was run around on these little motorcycles and play with kids in the yard and sort of painting and other things that were not structured in the same sense and he loved it and had a great time and I thought like, "Hey, we did a good job as parents here. We did not subject our kid to just like you have to continue doing this, even if you hate it for weeks on end just because we think this is the right thing for you."

!# T.M. @ 00:53:52

Self opinion as a kid: smarter than the rest, different, not really?

!# David @ 00:53:58

When I think back, I definitely had lots of domains where I certainly do not feel smart and ironically enough the one I ended up doing professionally-- programming-- was one of those. Because most of the time growing up I had older friends and they were into computers and quite a few of them were programmers and they were really good. So
what I saw was this huge jump in skill that just seemed insurmountable for me. That this was not me. I couldn't do those things, in part because I tried somewhat a little bit and having succeeded on the first go as though anyone ever does. But then I saw the comparison to these friends I had who were just really good at what they were doing and then they were like, "Jeez, this is too hard. Like I got to do something else."

So I never had this I'm smarter than everyone else. What I did have though was an innate sense that if a large enough group of people can figure this out so can I. Like I'm not dumber than everyone else that's for sure. I don't ascribe to like, "Oh, yeah, I'm just a dummy. I can't figure this out." No, no, I can figure this out if I apply myself well enough to it. I'm not gifted with something special here. I don't have some innate talent to do this that gives me a leg up. In some domains, I thought like maybe I could become a programmer, but I am just not going to put in the time. That look really really hard and I can spend my time on other things that perhaps look easier to me and I'll try my hand at those first. So it was kind of a dichotomy between thinking I am not actually that good at a bunch of things, but at the same time I can become good enough if I just apply myself.

When it came to programming then, it was an interesting switch when I then learned how to program and then again I didn't think of myself as programmer when I first learned to program. Then I started working in open source and after a couple of years, I got exposed enough to see that the code that I was putting out and the way I was running projects was working. And that was really a comparison that wasn't available in the same way before the internet and before open source and before getting involved with all those things. I didn't have a good way of measuring my progress. I would just measure my progress against books or my own sense of self-worth and that wasn't always in tune. So for a long time, I absolutely did not have any delusions that I was doing anything that noteworthy. It wasn't until I got a chance to compare myself openly against a lot of other people and a lot of other projects  and a lot of other code that I thought like, "Oh, wait a minute, perhaps this isn't so shabby after all."

The same went with things like driving a race car. Like when I first started to drive I felt like, "Oh, jeez, I'm really not that good at this. I'm finishing quite far down the totem pole." But a lot of that was putting myself early against people who were just really good." I think it's otherwise easy to fall into the trap where you are just comparing yourself to some little local circle and thinking like, "Oh, I'm the best of my local gang at either programming or playing [Magic the Gathering](http://magic.wizards.com/) or [Mortal Kombat](https://en.wikipedia.org/wiki/Mortal_Kombat) or the racetrack." And then resting assured and happy and satisfied with that. That's what we talked about earlier. That was never had an appeal to me. So I'd rather just think that I am no different than anyone else, but if I apply myself hard enough, not so much just through like just put in hard work, but... it's hard to find the right words for this because I do not want to say like "be smart enough about it," but that's a misnomer too because as I just said I didn't think of myself as particularly smart. But I did think that there were ways of learning that are smart. It's not so much that I'm smart, but there are some smart techniques and I can just pull those techniques off the shelf and I can apply them and I can end up in a different place through that.

!# Ian M @ 00:58:19

How does he prep for [Le Mans](https://en.wikipedia.org/wiki/24_Hours_of_Le_Mans)? How does he stay alert behind the wheel for such long periods of time?

!# David @ 00:58:24

So [Le Mans](https://en.wikipedia.org/wiki/24_Hours_of_Le_Mans) is a 24-hour race in France that happens once a year. It's a whole week of fun and game and exhausting times. They start by doing the scrutineering as it's called-- the check up the car, the technical check that to make sure your car is up to regulations-- in the town center on the Sunday and then the race is that Saturday. So it is a really long week and it's a really exhausting time. And you do have to prepare for that.

It's an interesting sort of way that you do prepare. One of the greatest ways to prepare for a [Le Mans](https://en.wikipedia.org/wiki/24_Hours_of_Le_Mans) is to just do a bunch of racing before it. There really is no other exercise like actually being on a racetrack that will stand in for that. That doesn't mean that that is the only thing you do. Usually, ahead of every season, I have a fairly rigorous training program-- 3 times a week, where I work with a personal trainer for one hour, 3 times a week and we do strength training and we do endurance training and so forth, just to have a general good fitness level. That's certainly important. It is certainly important to just be in a good shape. I don't take it that extreme. There are definitely professional drivers that race in the top prototype class, [LMP1](http://www.europeanlemansseries.com/en/elms/the-different-classes/4) that has the toughest physical requirements that do just intensive non-stop training. They bike and do all these other things. Well, I'm not a full-time athlete. To be honest, I don't enjoy it that much. I exercise because I know it's good for me. I know afterward that it feels better. I know that I'm going to be in better overall shape, not just physically but mentally as a human being. And because I want things. I want to be competitive at [Le Mans](https://en.wikipedia.org/wiki/24_Hours_of_Le_Mans). These are the things I have to do. And I just found the that those things just don't happen automatically for me. I'm not the person who says there is an hour, let's just go work out. So that's where having a trainer and working on appointment with someone has been really helpful to me.

So I do that and then the funny thing with [Le Mans](https://en.wikipedia.org/wiki/24_Hours_of_Le_Mans) is that a lot of it is still mental, too. It's not just about the physical preparation for it. I've seen plenty of drivers were in great physical condition still absolutely bomb at [Le Mans](https://en.wikipedia.org/wiki/24_Hours_of_Le_Mans) because they just can't keep the mental game together. And part of the mental game is if you're leading if you're close to leading, is the pressure of not making a mistake for that many hours just going around round going to get to you? Are you trying to reach too high and for too much such that you get yourself into one of those mistakes? There's a lot of patience to be played. And it's easy to have that patience perhaps in first stint or the second stint, but perhaps a little harder to have that later in the game and that's when a lot of people make mistakes.

You also, of course, have the fact that it is 24 hours. And when you say 24 hours. It's not really 24 hours. It's more like 36 hours or 40 hours because you get up pretty early that morning. The race doesn't start until 3 o'clock so you've already been up for a long time by the time the race starts. So there's just a lot of sleep deprivation that actually goes into that specific day on top of the fact that you've already been at [Le Mans](https://en.wikipedia.org/wiki/24_Hours_of_Le_Mans) for a whole week and that's tough and that's physically and that's challenging. So you just have to bring that in because the actual time when you sit in the car and you're going at it, adrenaline just kicks in. It doesn't really matter how tired you are like it's not like you'll have trouble keeping your eyes awake going 300KM/H. I've had that driving a normal street car where you just go, "I am too tired to actually do that. No matter how much will I applied to this problem, it's really hard for me to stay awake." You don't really have that same problem in a race car, thankfully. I've never heard of someone falling asleep at the wheel when you're actually going at. Things just happen too quickly. But that can sometimes give you a false sense of security; that just because you can keep your eyes open that your mind is open too. And that you are making all the adjustments to your routine as circumstances demand them because driving around the racetrack for 24 hours it means the track changes... You have all sorts of things... People go off track... People are not good; They pull gravel onto the track. You have to make constant alterations. So you have to not just be awake, but have an open mind to changing things and changing things up and I think that is probably one of the hardest things for a lot of drivers that just keeping in that open mode, not just putting it on auto-pilot because on auto-pilot that's when you make a mistake then the next time you come around for some corner, there's a car that dragged something on to the track or the track itself just changes. Over the 24 hours it changes immensely-- more rubber goes down or if you have weather, any of these other things. So that is some of the considerations that I put into it. That is why I think [Le Mans](https://en.wikipedia.org/wiki/24_Hours_of_Le_Mans) is just the greatest race in the world because it brings these challenges. You don't usually feel when you do a six-hour race or 45-minute race for that matter. It's a unique challenge to make no mistakes and stay on your game for 24 hours.

!# Stuart H. @ 01:03:57

Where do you take a piss when racing a 24-hour Le Mans race?

!# David @ 01:04:02

Well, in the seat. That is the honest truth. I have never in my 6 years of racing had to pee that bad that I went in my seat, but I guarantee you that lots and lots of drivers have. I was just actually in a 10-hour race in the US a couple months ago and my co-driver god-damn peed in the seat. It was in the start of his stint. He'd been out for an hour and I think the realization that he had to be in the car for another two and a half hours... he just went, "Fuck it. I'm peeing in my seat." And, of course, the team is laughing and laughing and why are they laughing... because they don't have to go into the seat after him. I had to go into the seat after him. The guy, one of the mechanics, was like, "Ha ha, you are going to have such a monkey butt when you get out." Because apparently when you are sitting on people's pee for a couple of hours like that's not that great for your skin. It soaks in through your suit and generally it is just disgusting. I think that is one of the drawbacks of team racing when you have multiple drivers in the lineup who have to share a car together. Well, it's more on the other guys if you pee in your seat. At least if you pee, it is your own pee. So people simply just go. Doesn't happen all the time. Doesn't happen frequently. But it does happen often enough that absolutely the consequences are something that most race teams that have been in business for a while they know all about.

!# End @ 1:05:29
